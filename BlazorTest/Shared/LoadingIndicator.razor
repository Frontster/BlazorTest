@if (IsLoading)
{
    <div class="@(Fullscreen ? "loading-overlay" : "loading-inline")"
         @attributes="AdditionalAttributes">
        <div class="@(Fullscreen ? "spinner-container" : "spinner-container-inline")">
            <div class="spinner-border @SpinnerClass" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="mt-2 loading-message">@Message</div>
            }
            @if (ShowProgress && MaxProgress > 0)
            {
                <div class="progress mt-2" style="width: 200px;">
                    <div class="progress-bar @ProgressClass" role="progressbar"
                         style="width: @(CurrentProgress * 100 / MaxProgress)%"
                         aria-valuenow="@CurrentProgress"
                         aria-valuemin="0"
                         aria-valuemax="@MaxProgress">
                        @(Math.Round((double)CurrentProgress * 100 / MaxProgress))%
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    /// <summary>
    /// Whether the loading indicator should be displayed
    /// </summary>
    [Parameter]
    public bool IsLoading { get; set; }

    /// <summary>
    /// Whether the loading indicator should cover the full screen/parent
    /// </summary>
    [Parameter]
    public bool Fullscreen { get; set; } = true;

    /// <summary>
    /// Optional message to display below the spinner
    /// </summary>
    [Parameter]
    public string Message { get; set; } = "Loading...";

    /// <summary>
    /// CSS class for the spinner (e.g., text-primary, text-danger)
    /// </summary>
    [Parameter]
    public string SpinnerClass { get; set; } = "text-primary";

    /// <summary>
    /// Whether to show a progress bar
    /// </summary>
    [Parameter]
    public bool ShowProgress { get; set; }

    /// <summary>
    /// Current progress value
    /// </summary>
    [Parameter]
    public int CurrentProgress { get; set; }

    /// <summary>
    /// Maximum progress value
    /// </summary>
    [Parameter]
    public int MaxProgress { get; set; } = 100;

    /// <summary>
    /// CSS class for the progress bar
    /// </summary>
    [Parameter]
    public string ProgressClass { get; set; } = "bg-primary";

    /// <summary>
    /// Captures any additional attributes that aren't specifically captured
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();
}