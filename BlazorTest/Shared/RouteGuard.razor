@using Microsoft.AspNetCore.Components.Rendering
@using BlazorTest.Services

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="route-guard-container">
    @if (isCheckingAuth)
    {
        <div class="loading-container">
            <LoadingIndicator IsLoading="true" Message="Loading content..." Fullscreen="true" />
        </div>
    }
    else if (!isAuthenticated)
    {
        <div class="auth-required-container">
            <div class="alert alert-warning">
                <h4 class="alert-heading">Authentication Required</h4>
                <p>You need to log in to access this page.</p>
                <hr>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </div>
    }
    else
    {
        @ChildContent
    }
</div>

@code {
    [CascadingParameter]
    private AuthStateProvider AuthState { get; set; } = null!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public string[] Roles { get; set; } = Array.Empty<string>();
    
    private bool isCheckingAuth = true;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("RouteGuard.OnInitialized: Initializing");
        
        // Subscribe to auth state changes
        if (AuthState != null)
        {
            AuthState.OnAuthStateChanged += HandleAuthStateChanged;
            await CheckAuthenticationAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Log component initialization for debugging
            await JSRuntime.InvokeVoidAsync("console.log", "RouteGuard component initialized");
        }
    }

    private async Task CheckAuthenticationAsync()
    {
        try
        {
            isCheckingAuth = true;
            StateHasChanged();
            
            // Get authentication status from AuthState
            if (AuthState != null)
            {
                isAuthenticated = AuthState.IsAuthenticated;
            }
        }
        finally
        {
            isCheckingAuth = false;
            StateHasChanged();
        }
    }
    
    private async void HandleAuthStateChanged()
    {
        Console.WriteLine("RouteGuard.HandleAuthStateChanged: Auth state changed");
        // Update authentication status when auth state changes
        await CheckAuthenticationAsync();
    }

    private void NavigateToLogin()
    {
        var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        NavigationManager.NavigateTo($"login?returnUrl={returnUrl}", forceLoad: false);
    }

    public void Dispose()
    {
        Console.WriteLine("RouteGuard.Dispose: Disposing");
        // Unsubscribe from auth state changes
        if (AuthState != null)
        {
            AuthState.OnAuthStateChanged -= HandleAuthStateChanged;
        }
    }
}

<style>
    .route-guard-container {
        width: 100%;
        min-height: 400px;
        position: relative;
    }
    
    .loading-container,
    .auth-required-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
        width: 100%;
    }
    
    .auth-required-container .alert {
        max-width: 500px;
        margin: 2rem auto;
    }
</style>
