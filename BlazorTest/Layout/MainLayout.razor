@using BlazorTest.Services
@using BlazorTest.Shared
@inherits LayoutComponentBase
@inject AuthService AuthService
@inject DataService DataService
@inject AppStateService AppState
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="page">
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <a class="navbar-brand" href="">Blazor Learning App</a>
                <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="@NavMenuCssClass navbar-collapse">
                    @if (IsAuthenticated)
                    {
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            <li class="nav-item">
                                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                                    <span class="oi oi-home" aria-hidden="true"></span> Dashboard
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="products">
                                    <span class="oi oi-list" aria-hidden="true"></span> Products
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="users">
                                    <span class="oi oi-people" aria-hidden="true"></span> Users
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="reports">
                                    <span class="oi oi-bar-chart" aria-hidden="true"></span> Reports
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="settings">
                                    <span class="oi oi-cog" aria-hidden="true"></span> Settings
                                </NavLink>
                            </li>
                        </ul>

                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrWhiteSpace(AppState.SelectedCategory))
                            {
                                <div class="me-3" style="min-width: 150px;">
                                    <select class="form-select form-select-sm" @bind="SelectedCategory" @bind:event="onchange" disabled="@AppState.IsLoading">
                                        @foreach (var category in DataService.AvailableCategories)
                                        {
                                            <option value="@category">@category</option>
                                        }
                                    </select>
                                </div>
                            }
                            <div class="me-3">
                                <span>Welcome, @UserName</span>
                            </div>
                            <button class="btn btn-sm btn-outline-dark" @onclick="LogoutAsync" disabled="@AppState.IsLoading">
                                @if (AppState.IsLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Logout</span>
                                }
                            </button>
                        </div>
                    }
                    else
                    {
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            <li class="nav-item">
                                <NavLink class="nav-link" href="login">
                                    <span class="oi oi-account-login" aria-hidden="true"></span> Login
                                </NavLink>
                            </li>
                        </ul>
                    }
                </div>
            </div>
        </nav>
    </header>

    <main class="container-fluid py-4">
        <!-- Global Loading Indicator - Shows whenever AppState.IsLoading is true -->
        <LoadingIndicator IsLoading="@AppState.IsLoading" Fullscreen="true" Message="Loading content..." />

        <!-- Main Content Area -->
        <div class="@(AppState.IsLoading ? "content-loading" : "")">
            @Body
        </div>
    </main>
</div>

@code {
    private bool IsAuthenticated { get; set; }
    private string UserName { get; set; } = string.Empty;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    // Property for binding to the category dropdown
    private string SelectedCategory
    {
        get => AppState.SelectedCategory;
        set
        {
            if (AppState.SelectedCategory != value)
            {
                AppState.SelectedCategory = value;
                Console.WriteLine($"Category changed to: {value}");
                // Force navigation to same page to trigger a refresh
                RefreshCurrentPage();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("MainLayout.OnInitializedAsync called");
        // Check authentication status and get user info
        IsAuthenticated = await AuthService.IsAuthenticatedAsync();
        Console.WriteLine($"Authentication status: {IsAuthenticated}");

        if (IsAuthenticated)
        {
            UserName = await AuthService.GetUserNameAsync();
            Console.WriteLine($"User logged in: {UserName}");
        }

        // Subscribe to AppState changes
        AppState.OnChange += AppStateChanged;

        // Redirect to login if not authenticated and not already on login page
        if (!IsAuthenticated && !NavigationManager.Uri.Contains("login", StringComparison.OrdinalIgnoreCase))
        {
            Console.WriteLine("Not authenticated, redirecting to login");
            NavigationManager.NavigateTo("login");
        }
    }

    private void AppStateChanged()
    {
        Console.WriteLine("AppState changed, calling StateHasChanged");
        InvokeAsync(StateHasChanged);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        Console.WriteLine($"NavMenu toggled, collapsed: {collapseNavMenu}");
    }

    // Refresh the current page when the selected category changes
    private void RefreshCurrentPage()
    {
        var uri = NavigationManager.Uri;
        Console.WriteLine($"Refreshing current page: {uri}");
        // This forces the components to reload by navigating to the same page
        NavigationManager.NavigateTo(uri, forceLoad: false);
    }

    private async Task LogoutAsync()
    {
        Console.WriteLine("Logging out");
        await AuthService.LogoutAsync();
        IsAuthenticated = false;
        NavigationManager.NavigateTo("login");
    }

    public void Dispose()
    {
        Console.WriteLine("MainLayout.Dispose called, unsubscribing from events");
        // Unsubscribe from AppState changes
        AppState.OnChange -= AppStateChanged;
    }
}

<style>
    .page {
        position: relative;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    main {
        flex: 1;
    }

    header {
        position: sticky;
        top: 0;
        z-index: 1000;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Loading overlay styling */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .spinner-container {
        text-align: center;
    }

    /* Content styling when loading */
    .content-loading {
        opacity: 0.6;
        pointer-events: none;
    }
</style>