@page "/"
@using BlazorTest.Models
@using BlazorTest.Services
@inject DataService DataService
@inject AppStateService AppState
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>Dashboard - Blazor Learning App</PageTitle>

@if (!isAuthenticated)
{
    <div class="alert alert-warning">
        Please login to view the dashboard.
    </div>
}
else
{
    @if (dashboardData != null)
    {
        <h1>@dashboardData.Title</h1>

        <div class="row mt-4">
            <!-- Dashboard Stats Cards -->
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Total Items</h5>
                        <h2 class="display-4">@dashboardData.TotalItems</h2>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Completed Items</h5>
                        <h2 class="display-4">@dashboardData.CompletedItems</h2>
                        <div class="progress mt-2">
                            <div class="progress-bar" role="progressbar"
                                 style="width: @(dashboardData.CompletedItems * 100 / Math.Max(1, dashboardData.TotalItems))%"
                                 aria-valuenow="@dashboardData.CompletedItems"
                                 aria-valuemin="0"
                                 aria-valuemax="@dashboardData.TotalItems">
                                @(Math.Round((double)dashboardData.CompletedItems * 100 / Math.Max(1, dashboardData.TotalItems)))%
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Activity Table -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Recent Activity</h5>
                <button class="btn btn-sm btn-outline-primary" @onclick="RefreshDashboardAsync" disabled="@AppState.IsLoading">
                    @if (AppState.IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="oi oi-reload" aria-hidden="true"></span>
                    }
                    Refresh
                </button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>User</th>
                                <th>Action</th>
                                <th>Category</th>
                                <th>Time</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var activity in dashboardData.RecentActivity)
                            {
                                <tr>
                                    <td>@activity.User</td>
                                    <td>@activity.Action</td>
                                    <td>@activity.Category</td>
                                    <td>@activity.Time.ToString("g")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
}

@code {
    private DashboardData? dashboardData;
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        // Check authentication status
        isAuthenticated = await AuthService.IsAuthenticatedAsync();

        if (isAuthenticated)
        {
            // Fetch dashboard data on initialization
            await LoadDashboardDataAsync();

            // Subscribe to AppState changes (e.g., when category changes)
            AppState.OnChange += AppStateChanged;
        }
        else
        {
            // Redirect to login if not authenticated
            NavigationManager.NavigateTo("login");
        }
    }

    /// <summary>
    /// Loads dashboard data from the DataService
    /// This method is called on initialization and when the Refresh button is clicked
    /// </summary>
    private async Task LoadDashboardDataAsync()
    {
        // The DataService.GetDashboardDataAsync method has its own internal loading state
        // so we don't need to set AppState.IsLoading here
        dashboardData = await DataService.GetDashboardDataAsync();
    }

    /// <summary>
    /// Handles changes in the AppState (when the dropdown value changes)
    /// Forces a refresh of the dashboard data
    /// </summary>
    private void AppStateChanged()
    {
        // This will be invoked when the selected category changes
        // State has already changed in the AppState service, so we just need to re-render
        StateHasChanged();
    }

    /// <summary>
    /// Manually refreshes the dashboard data when the Refresh button is clicked
    /// </summary>
    private async Task RefreshDashboardAsync()
    {
        await LoadDashboardDataAsync();
    }

    public void Dispose()
    {
        // Unsubscribe from AppState changes
        AppState.OnChange -= AppStateChanged;
    }
}